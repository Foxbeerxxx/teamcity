---
# Установка Python 3, если не установлен (CentOS 7 — оставлено на случай кросс-платформенности)
- name: Bootstrap Python if missing
  hosts: nexus
  gather_facts: false
  become: true
  tasks:
    - name: Ensure python3 is installed (for CentOS 7)
      raw: |
        yum install -y python3 || true
      changed_when: false

# Установка и настройка Nexus
- name: Get Nexus installed
  hosts: nexus
  become: true

  pre_tasks:
    - name: Create Nexus group
      group:
        name: "{{ nexus_user_group }}"
        state: present

    - name: Create Nexus user
      user:
        name: "{{ nexus_user_name }}"
        group: "{{ nexus_user_group }}"
        shell: /bin/bash
        create_home: yes

    - name: Show OS family
      debug:
        var: ansible_os_family

    - name: Install Java 8 on Ubuntu
      apt:
        name: openjdk-8-jdk
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Set JAVA_HOME in Nexus user's .bashrc
      lineinfile:
        path: "/home/{{ nexus_user_name }}/.bashrc"
        line: 'export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64'
        insertafter: EOF
        state: present
        create: yes
        owner: "{{ nexus_user_name }}"
        group: "{{ nexus_user_group }}"
      when: ansible_os_family == "Debian"

  tasks:
    - name: Create Nexus directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ nexus_user_name }}"
        group: "{{ nexus_user_group }}"
        mode: '0755'
      loop:
        - "{{ nexus_directory_log }}"
        - "{{ nexus_directory_data }}"
        - "{{ nexus_directory_data }}/etc"
        - "{{ nexus_directory_package }}"
        - "{{ nexus_directory_tmp }}"

    - name: Check if Nexus archive already exists
      stat:
        path: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}.tar.gz"
      register: nexus_tarball

    - name: Download Nexus (with timeout, only if missing)
      get_url:
        url: "{{ nexus_download_url }}/nexus-{{ nexus_version }}-unix.tar.gz"
        dest: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}.tar.gz"
        mode: '0644'
        timeout: 120
      when: not nexus_tarball.stat.exists

    - name: Extract Nexus
      unarchive:
        src: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}.tar.gz"
        dest: "{{ nexus_directory_package }}"
        remote_src: yes
        creates: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}"

    - name: Set permissions on extracted Nexus
      file:
        path: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}"
        state: directory
        recurse: yes
        owner: "{{ nexus_user_name }}"
        group: "{{ nexus_user_group }}"

    - name: Create symlink to Nexus directory
      file:
        src: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}"
        dest: "{{ nexus_directory_home }}"
        state: link
        owner: "{{ nexus_user_name }}"
        group: "{{ nexus_user_group }}"

    - name: Add NEXUS_HOME to .bashrc
      lineinfile:
        path: "/home/{{ nexus_user_name }}/.bashrc"
        line: "export NEXUS_HOME={{ nexus_directory_home }}"
        create: yes
        insertafter: EOF
        owner: "{{ nexus_user_name }}"
        group: "{{ nexus_user_group }}"

    - name: Set run_as_user in nexus.rc
      lineinfile:
        path: "{{ nexus_directory_home }}/bin/nexus.rc"
        line: 'run_as_user="{{ nexus_user_name }}"'
        create: yes
        owner: "{{ nexus_user_name }}"
        group: "{{ nexus_user_group }}"

    - name: Raise nofile limit for Nexus user
      pam_limits:
        domain: "{{ nexus_user_name }}"
        limit_type: "-"
        limit_item: nofile
        value: "{{ nexus_ulimit }}"

    - name: Create Nexus systemd service with NEXUS_DATA
      copy:
        dest: /etc/systemd/system/nexus.service
        content: |
          [Unit]
          Description=Nexus Repository Manager
          After=network.target

          [Service]
          Type=forking
          LimitNOFILE=65536
          Environment=INSTALL4J_JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
          Environment=NEXUS_DATA={{ nexus_directory_data }}
          User={{ nexus_user_name }}
          Group={{ nexus_user_group }}
          ExecStart={{ nexus_directory_home }}/bin/nexus start
          ExecStop={{ nexus_directory_home }}/bin/nexus stop
          Restart=on-abort

          [Install]
          WantedBy=multi-user.target
        mode: '0644'

    - name: Reload systemd and enable/start Nexus
      systemd:
        daemon_reload: yes
        name: nexus
        enabled: yes
        state: started

    - name: Wait for Nexus port if started
      wait_for:
        port: "{{ nexus_port }}"
        host: "127.0.0.1"
        state: started
        timeout: 180
        delay: 10
      when: nexus_service_start_on_boot | default(true)
